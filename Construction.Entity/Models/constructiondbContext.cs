// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Construction.Entity.Models;

public partial class constructiondbContext : DbContext
{
    public constructiondbContext(DbContextOptions<constructiondbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Organisation> Organisations { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Site> Sites { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Userrole> Userroles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Organisation>(entity =>
        {
            entity.ToTable("Organisation");

            entity.Property(e => e.OrganisationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("organisationId");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(false)
                .HasColumnName("isActive");
            entity.Property(e => e.OrganisationName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("organisationName");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Roleid).HasName("PK_role");

            entity.ToTable("Role");

            entity.Property(e => e.Roleid)
                .ValueGeneratedNever()
                .HasColumnName("roleid");
            entity.Property(e => e.Organisationid).HasColumnName("organisationid");
            entity.Property(e => e.Rolename)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("rolename");
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.ToTable("Site");

            entity.Property(e => e.Siteid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("siteid");
            entity.Property(e => e.Isactive)
                .HasDefaultValue(true)
                .HasColumnName("isactive");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("location");
            entity.Property(e => e.Organisationid).HasColumnName("organisationid");
            entity.Property(e => e.Sitename)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("sitename");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("user");

            entity.Property(e => e.Userid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("userid");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Contactnumber)
                .HasMaxLength(20)
                .HasColumnName("contactnumber");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Firstname).HasMaxLength(100);
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Lastname).HasMaxLength(100);
            entity.Property(e => e.OrganisationId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Password).HasMaxLength(256);
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.Wageperday)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("wageperday");
        });

        modelBuilder.Entity<Userrole>(entity =>
        {
            entity.HasKey(e => e.Userroleid).HasName("PK__userrole__F07D108AF4391A7F");

            entity.ToTable("userrole");

            entity.Property(e => e.Userroleid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("userroleid");
            entity.Property(e => e.Roleid).HasColumnName("roleid");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}